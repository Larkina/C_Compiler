Token{value=int, text=int, type=KEY_WORD}
Token{value=main, text=main, type=VAR}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value=), text=), type=R_PARENTHESIS}
Token{value={, text={, type=L_BRACE}
Token{value=int, text=int, type=KEY_WORD}
Token{value=a, text=a, type=VAR}
Token{value=[, text=[, type=L_BRAKET}
Token{value=100, text=n10, type=INT}
Token{value=], text=], type=R_BRAKET}
Token{value==, text==, type=ASSIGN}
Token{value={, text={, type=L_BRACE}
Token{value=0, text=n10, type=INT}
Token{value=}, text=}, type=R_BRACE}
Token{value=;, text=;, type=SEMICOLON}
Token{value=int, text=int, type=KEY_WORD}
Token{value=n, text=n, type=VAR}
Token{value==, text==, type=ASSIGN}
Token{value=0, text=n10, type=INT}
Token{value=;, text=;, type=SEMICOLON}
Token{value=scanf, text=scanf, type=VAR}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value="%d", text="%d", type=STRING}
Token{value=,, text=,, type=COMMA}
Token{value=&, text=&, type=AND_B}
Token{value=n, text=n, type=VAR}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=;, text=;, type=SEMICOLON}
Token{value=for, text=for, type=KEY_WORD}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value=int, text=int, type=KEY_WORD}
Token{value=i, text=i, type=VAR}
Token{value==, text==, type=ASSIGN}
Token{value=0, text=n10, type=INT}
Token{value=;, text=;, type=SEMICOLON}
Token{value=i, text=i, type=VAR}
Token{value=<, text=<, type=LT}
Token{value=n, text=n, type=VAR}
Token{value=;, text=;, type=SEMICOLON}
Token{value=++, text=++, type=INC}
Token{value=i, text=i, type=VAR}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=scanf, text=scanf, type=VAR}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value="%d", text="%d", type=STRING}
Token{value=,, text=,, type=COMMA}
Token{value=&, text=&, type=AND_B}
Token{value=a, text=a, type=VAR}
Token{value=[, text=[, type=L_BRAKET}
Token{value=i, text=i, type=VAR}
Token{value=], text=], type=R_BRAKET}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=;, text=;, type=SEMICOLON}
Token{value=for, text=for, type=KEY_WORD}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value=int, text=int, type=KEY_WORD}
Token{value=i, text=i, type=VAR}
Token{value==, text==, type=ASSIGN}
Token{value=0, text=n10, type=INT}
Token{value=;, text=;, type=SEMICOLON}
Token{value=i, text=i, type=VAR}
Token{value=<, text=<, type=LT}
Token{value=n, text=n, type=VAR}
Token{value=;, text=;, type=SEMICOLON}
Token{value=++, text=++, type=INC}
Token{value=i, text=i, type=VAR}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=for, text=for, type=KEY_WORD}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value=int, text=int, type=KEY_WORD}
Token{value=j, text=j, type=VAR}
Token{value==, text==, type=ASSIGN}
Token{value=0, text=n10, type=INT}
Token{value=;, text=;, type=SEMICOLON}
Token{value=j, text=j, type=VAR}
Token{value=<, text=<, type=LT}
Token{value=n, text=n, type=VAR}
Token{value=;, text=;, type=SEMICOLON}
Token{value=++, text=++, type=INC}
Token{value=j, text=j, type=VAR}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=swap, text=swap, type=VAR}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value=a, text=a, type=VAR}
Token{value=[, text=[, type=L_BRAKET}
Token{value=i, text=i, type=VAR}
Token{value=], text=], type=R_BRAKET}
Token{value=,, text=,, type=COMMA}
Token{value=a, text=a, type=VAR}
Token{value=[, text=[, type=L_BRAKET}
Token{value=j, text=j, type=VAR}
Token{value=], text=], type=R_BRAKET}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=;, text=;, type=SEMICOLON}
Token{value=for, text=for, type=KEY_WORD}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value=int, text=int, type=KEY_WORD}
Token{value=i, text=i, type=VAR}
Token{value==, text==, type=ASSIGN}
Token{value=0, text=n10, type=INT}
Token{value=;, text=;, type=SEMICOLON}
Token{value=i, text=i, type=VAR}
Token{value=<, text=<, type=LT}
Token{value=n, text=n, type=VAR}
Token{value=;, text=;, type=SEMICOLON}
Token{value=++, text=++, type=INC}
Token{value=i, text=i, type=VAR}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=printf, text=printf, type=VAR}
Token{value=(, text=(, type=L_PARENTHESIS}
Token{value="%d", text="%d", type=STRING}
Token{value=,, text=,, type=COMMA}
Token{value=a, text=a, type=VAR}
Token{value=[, text=[, type=L_BRAKET}
Token{value=i, text=i, type=VAR}
Token{value=], text=], type=R_BRAKET}
Token{value=), text=), type=R_PARENTHESIS}
Token{value=;, text=;, type=SEMICOLON}
Token{value=}, text=}, type=R_BRACE}
